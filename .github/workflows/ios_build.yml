name: iOS Build and Deploy

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Install dependencies
      - name: Install Fastlane and CocoaPods
        run: |
          brew install fastlane cocoapods
          gem install bundler # Optional, for Ruby projects with a Gemfile
          pod setup
      - name: Install npm dependencies
        run: npm install

      # Step 4: Configure provisioning profile
      - name: Set up provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}

      # Step 5: Configure certificate
      - name: Set up certificate
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "github" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "github" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "github" build.keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # Step 6: Prepare dependencies
      - name: Prepare dependencies
        run: |
          cd ios
          pod deintegrate || true
          pod install --repo-update

      # Step 7: Build the app and create the archive
      - name: Build and Archive iOS App
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          cd ios
          xcodebuild \
            -workspace "IosGithubActionBuild.xcworkspace" \
            -scheme "IosGithubActionBuild" \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "./build/IosGithubActionBuild.xcarchive" \
            clean archive \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="app-store-profile-sample-github-actions" \
          | xcbeautify

      # Step 8: Export the archive to an IPA file
      - name: Export IPA File
        env:
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          cd ios
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>org.reactjs.native.example.IosGithubActionBuild</key>
              <string>app-store-profile-sample-github-actions</string>
            </dict>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath "./build/IosGithubActionBuild.xcarchive" \
            -exportPath "./build" \
            -exportOptionsPlist ExportOptions.plist \
          | xcbeautify

      # Step 9: Verify exported files
      - name: Verify Build Directory
        run: ls -R ios/build

      # Step 10: Cleanup sensitive data
      - name: Cleanup
        if: always()
        run: |
          rm -rf ios/build/*.p12
          rm -rf ios/build/*.mobileprovision
          security delete-keychain build.keychain
