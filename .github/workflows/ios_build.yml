# .github/workflows/ios-build.yml
name: iOS Build and Deploy
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: macos-latest # Uses macOS runner with Xcode pre-installed

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Node.js 22
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Fastlane
        run: brew install fastlane cocoapods
      # Install dependencies
      - name: Install npm dependencies
        run: npm install

      - name: Install pod dependencies
        run: cd ios && pod install
      # Build the iOS app
      #- name: Build iOS App
      #  run: cd ios && fastlane build
      - name: Set up provisioning profile
        run: mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles && echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}

      - name: Set up certificate
        run: |
          echo "$CERTIFICATE_P12" | base64 --decode > certificate.p12
          security create-keychain -p "github" build.keychain
          security import certificate.p12 -k ~/Library/Keychains/build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychains -s ~/Library/Keychains/build.keychain
          security list-keychains -s build.keychain
          security set-keychain-settings build.keychain
          security unlock-keychain -p "$CERT_PASSWORD" ~/Library/Keychains/build.keychain
        env:
          CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}

      # - name: Build iOS App
      #   env:
      #     TEAM_ID: ${{ secrets.GYM_EXPORT_TEAM_ID }}
      #   run: |
      #        cd ios
      #         fastlane run update_project_team path:"./IosGithubActionBuild.xcodeproj" teamid:"$TEAM_ID"
      #         xcodebuild \
      #           -workspace "IosGithubActionBuild.xcworkspace" \
      #           -scheme "IosGithubActionBuild" \
      #           -destination "generic/platform=iOS" \
      #           -configuration Release \
      #           clean build \
      #           CODE_SIGN_IDENTITY="iPhone Distribution" \
      #           CODE_SIGN_STYLE="Manual" \
      #           PROVISIONING_PROFILE_SPECIFIER="app-store-profile-sample-github-actions" \
      #           COCOAPODS_PARALLEL_CODE_SIGN=true \
      #           -archivePath "./build/GenericBuild.xcarchive" \
      #           archive | xcbeautify
      #         plutil -create xml1 ExportOptions.plist
      #         plutil -insert method -string "app-store" ExportOptions.plist
      #         plutil -insert destination -string "export" ExportOptions.plist
      #         xcodebuild -exportArchive \
      #           -archivePath "./build/GenericBuild.xcarchive" \
      #           -exportPath "./build" \
      #           -exportOptionsPlist "ExportOptions.plist"


      - name: Build iOS App
        env:
          TEAM_ID: ${{ secrets.GYM_EXPORT_TEAM_ID }}
          CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        run: |
          cd ios
          security unlock-keychain -p "$CERT_PASSWORD" ~/Library/Keychains/build.keychain
          fastlane run update_project_team path:"./IosGithubActionBuild.xcodeproj" teamid:"$TEAM_ID"
          export GYM_SCHEME="IosGithubActionBuild"
          export GYM_DESTINATION="generic/platform=iOS"
          export GYM_WORKSPACE="IosGithubActionBuild.xcworkspace"
          export GYM_EXPORT_METHOD="app-store"
          export GYM_OUTPUT_DIRECTORY="./build"
          export GYM_OUTPUT_NAME="GenericBuild.ipa"
          export GYM_CLEAN=true
          # export GYM_XCARGS="-allowProvisioningUpdates"
          export GYM_XCARGS="COCOAPODS_PARALLEL_CODE_SIGN=true CODE_SIGN_IDENTITY='iPhone Distribution' CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER='app-store-profile-sample-github-actions'"
          fastlane run build_ios_app
          
      - name:  Ios App Upload
        run: |
          fastlane run app_store_connect_api_key \
          key_id:${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }} \
          issuer_id:${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
          key_content:${{ secrets.APP_STORE_CONNECT_API_KEY_KEY }}

          fastlane run upload_to_testflight \
            ipa:"./build/GenericBuild.ipa"

          
      - name: Cleanup
        if: always()
        run: |
          # Remove the decrypted certificate and provisioning profile
          rm -rf certificate.p12 profile.mobileprovision
          # Delete the keychain after the build process
          security delete-keychain build.keychain
            
